# -*- coding: utf-8 -*-
"""SENTIMENT_ANALYSIS.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1gPKos_xSbe1GrbOZnPo0i_a6QKIrZ1v_
"""

##using bag of words model to predict amazon food reviews

##we will the be using a roberta based model to perform the same task

from google.colab import files
files.upload()
!mkdir ~/.kaggle
!cp kaggle.json ~/.kaggle
!chmod 600 ~/.kaggle/kaggle.json

!kaggle datasets download -d snap/amazon-fine-food-reviews

import zipfile
zip=zipfile.ZipFile('/content/amazon-fine-food-reviews.zip','r')
zip.extractall('/content')
zip.close()

##all the imports

import numpy as np 
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
import nltk

df=pd.read_csv('Reviews.csv')

df.shape

df.sample(5)

##EDA

sns.distplot(df['Score'])
sns.distplot(df['HelpfulnessNumerator'])
sns.distplot(df['HelpfulnessDenominator'])

##performing standardization

df['HelpfulnessNumerator'].isnull().sum()

df.describe()

df=df.sample(5000)

df##reducing the dataset to train it aptly

print(df['Text'].sample(2))

from nltk.sentiment import SentimentIntensityAnalyzer
import nltk
from tqdm.notebook import tqdm
nltk.download("vader_lexicon")
sa=SentimentIntensityAnalyzer()

results={}
for i, row in tqdm(df.iterrows(),total=len(df)):
  text=row['Text']
  id=row['Id']
  results[id]=sa.polarity_scores(text)

result=pd.DataFrame(results).T

result.head()

result.reset_index().rename(columns={'index':'Id'})

result = result.merge(df, how='left')

plot=sns.barplot(data=result,x='Score',y='compound')
plot.set_title("score of amazon food reviews")
plt.show()

###USING ROBERTS BASED MODEL TO DO IT

!pip install transformers

from transformers import AutoModelForTokenClassification
from transformers import AutoTokenizer
from scipy.special import softmax

MODEL= f"cardiffnlp/twitter-roberta-base-sentiment"
token=AutoTokenizer.from_pretrained(MODEL)
model=AutoModelForTokenClassification.from_pretrained(MODEL)

def scores_roberta(example):
  text=token(example,return_tensors='pt')
  output=model(**text)
  score=output[0][0].detach().numpy()
  scores=softmax(score)
  scores_dict={
      'roberta_negative' : scores[0],
      'roberta_neutral' : scores[1] ,
      'roberta_postive': scores[2]
  }
  return scores_dict

results={}
for i, row in tqdm(df.iterrows(),total=len(df)):
 try:
  text=row['Text']
  id=row['Id']
  results[id]=sa.polarity_scores(text)
  roberta_result=polarity_scores_roberta(text)
  both={**results,**roberta_result}
  results[myid]=both
 except RuntimeError:
   print("ahh shit")

##ezzz transformer
from transformers import pipeline
pipw=pipeline("sentiment-analysis")

pipw("I love ml")

